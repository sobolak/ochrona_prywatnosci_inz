# -*- coding: utf-8 -*-
"""federated_differential_epsilon_presentation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14jrp4jGS7QQUKHG0wDGsSjK3f8afpsx5
"""

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from google.colab import drive
drive.mount('/content/drive')

buffor = pd.read_csv('/content/drive/MyDrive/inz/linear_regression_to_notebook.csv')

buffor

buffor[buffor.ilosc_probek == 100].ilosc_probek

from tabulate import tabulate

table = [['ilosc próbek', 'sklearn', 'po kwantyzacji', 'szyfrowanie homomorficzne', 'sklearn przedział ufności', 'po kwantyzacji przedział ufności', 'fhe przedział ufności'],
         [buffor[buffor.ilosc_probek == 100].ilosc_probek, buffor[buffor.ilosc_probek == 100].sklearn, buffor[buffor.ilosc_probek == 100].quantized ,buffor[buffor.ilosc_probek == 100].fhe , buffor[buffor.ilosc_probek == 100].interval_sklearn ,buffor[buffor.ilosc_probek == 100].interval_quantizated , buffor[buffor.ilosc_probek == 100].interval_fhe],
         [buffor[buffor.ilosc_probek == 200].ilosc_probek, buffor[buffor.ilosc_probek == 200].sklearn, buffor[buffor.ilosc_probek == 200].quantized ,buffor[buffor.ilosc_probek == 200].fhe , buffor[buffor.ilosc_probek == 200].interval_sklearn ,buffor[buffor.ilosc_probek == 200].interval_quantizated , buffor[buffor.ilosc_probek == 200].interval_fhe],
         [buffor[buffor.ilosc_probek == 500].ilosc_probek, buffor[buffor.ilosc_probek == 500].sklearn, buffor[buffor.ilosc_probek == 500].quantized ,buffor[buffor.ilosc_probek == 500].fhe , buffor[buffor.ilosc_probek == 500].interval_sklearn ,buffor[buffor.ilosc_probek == 500].interval_quantizated , buffor[buffor.ilosc_probek == 500].interval_fhe],
         [buffor[buffor.ilosc_probek == 750].ilosc_probek, buffor[buffor.ilosc_probek == 750].sklearn, buffor[buffor.ilosc_probek == 750].quantized ,buffor[buffor.ilosc_probek == 750].fhe , buffor[buffor.ilosc_probek == 750].interval_sklearn ,buffor[buffor.ilosc_probek == 750].interval_quantizated , buffor[buffor.ilosc_probek == 750].interval_fhe],
         [buffor[buffor.ilosc_probek == 1000].ilosc_probek, buffor[buffor.ilosc_probek == 1000].sklearn, buffor[buffor.ilosc_probek == 1000].quantized ,buffor[buffor.ilosc_probek == 1000].fhe , buffor[buffor.ilosc_probek == 1000].interval_sklearn ,buffor[buffor.ilosc_probek == 1000].interval_quantizated , buffor[buffor.ilosc_probek == 1000].interval_fhe],
         [buffor[buffor.ilosc_probek == 1500].ilosc_probek, buffor[buffor.ilosc_probek == 1500].sklearn, buffor[buffor.ilosc_probek == 1500].quantized ,buffor[buffor.ilosc_probek == 1500].fhe , buffor[buffor.ilosc_probek == 1500].interval_sklearn ,buffor[buffor.ilosc_probek == 1500].interval_quantizated , buffor[buffor.ilosc_probek == 1500].interval_fhe],
         [buffor[buffor.ilosc_probek == 2000].ilosc_probek, buffor[buffor.ilosc_probek == 2000].sklearn, buffor[buffor.ilosc_probek == 2000].quantized ,buffor[buffor.ilosc_probek == 2000].fhe , buffor[buffor.ilosc_probek == 2000].interval_sklearn ,buffor[buffor.ilosc_probek == 2000].interval_quantizated , buffor[buffor.ilosc_probek == 2000].interval_fhe],
         [buffor[buffor.ilosc_probek == 2500].ilosc_probek, buffor[buffor.ilosc_probek == 2500].sklearn, buffor[buffor.ilosc_probek == 2500].quantized ,buffor[buffor.ilosc_probek == 2500].fhe , buffor[buffor.ilosc_probek == 2500].interval_sklearn ,buffor[buffor.ilosc_probek == 2500].interval_quantizated , buffor[buffor.ilosc_probek == 2500].interval_fhe]]

print(tabulate(table, headers='firstrow', tablefmt='fancy_grid'))